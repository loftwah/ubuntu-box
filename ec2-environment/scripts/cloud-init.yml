#cloud-config

packages:
  # Base system packages
  - curl
  - wget
  - git
  - vim
  - nano
  - build-essential
  - python3-pip
  - python3-venv
  - apt-transport-https
  - ca-certificates
  - gnupg
  - lsb-release
  
  # AWS integration
  - amazon-cloudwatch-agent
  - amazon-efs-utils
  
  # Security tools
  - fail2ban
  - rkhunter
  - aide
  - lynis
  - unattended-upgrades
  - apparmor
  - auditd
  
  # Development dependencies
  - pkg-config
  - libssl-dev
  - zlib1g-dev
  - jq
  - yq
  - htop
  - ncdu
  - zip
  - unzip
  - tree
  - tmux
  - imagemagick
  - nodejs
  - npm
  - rustc
  - cargo
  - fd-find
  - fzf
  - ripgrep

write_files:
  - path: /home/ubuntu/.mise.toml
    content: |
      [tools]
      node = "20"
      go = "1.22"
      rust = "latest"
      ruby = "3.3"
      python = "3.12"
    owner: ubuntu:ubuntu
    permissions: '0644'

  - path: /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
    content: |
      {
        "agent": {
          "metrics_collection_interval": 60,
          "run_as_user": "root"
        },
        "metrics": {
          "metrics_collected": {
            "cpu": {
              "measurement": [
                "cpu_usage_idle",
                "cpu_usage_user",
                "cpu_usage_system",
                "cpu_usage_iowait"
              ],
              "resources": ["*"],
              "totalcpu": true
            },
            "disk": {
              "measurement": [
                "used_percent",
                "free",
                "total",
                "inodes_free",
                "inodes_used"
              ],
              "resources": ["/"],
              "drop_device": true
            },
            "mem": {
              "measurement": [
                "mem_used_percent",
                "mem_total",
                "mem_free",
                "mem_cached",
                "mem_available"
              ]
            },
            "net": {
              "resources": ["*"],
              "measurement": [
                "bytes_sent",
                "bytes_recv",
                "packets_sent",
                "packets_recv"
              ]
            }
          },
          "append_dimensions": {
            "InstanceId": "$${aws:InstanceId}"
          }
        },
        "logs": {
          "logs_collected": {
            "files": {
              "collect_list": [
                {
                  "file_path": "/var/log/auth.log",
                  "log_group_name": "/ubuntu-box/auth",
                  "log_stream_name": "{instance_id}"
                },
                {
                  "file_path": "/var/log/syslog",
                  "log_group_name": "/ubuntu-box/syslog",
                  "log_stream_name": "{instance_id}"
                },
                {
                  "file_path": "/var/log/docker/docker.log",
                  "log_group_name": "/ubuntu-box/docker",
                  "log_stream_name": "{instance_id}"
                }
              ]
            }
          }
        }
      }

  - path: /etc/ssh/sshd_config.d/hardening.conf
    content: |
      PermitRootLogin no
      PasswordAuthentication no
      MaxAuthTries 3
      ClientAliveInterval 300
      ClientAliveCountMax 2
      LoginGraceTime 30
      AllowAgentForwarding no
      X11Forwarding no
      Protocol 2
      KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512
      Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com
      MACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com

  - path: /etc/fail2ban/jail.local
    content: |
      [DEFAULT]
      bantime = 3600
      findtime = 600
      maxretry = 3
      
      [sshd]
      enabled = true
      port = ssh
      filter = sshd
      logpath = /var/log/auth.log
      maxretry = 3

  - path: /etc/audit/rules.d/audit.rules
    content: |
      # Delete all existing rules
      -D
      
      # Set buffer size
      -b 8192
      
      # Monitor unauthorized access attempts
      -w /var/log/auth.log -p wa -k auth_log
      -w /var/log/syslog -p wa -k syslog
      
      # Monitor system configuration changes
      -w /etc/passwd -p wa -k passwd_changes
      -w /etc/group -p wa -k group_changes
      -w /etc/ssh/sshd_config -p wa -k sshd_config
      
      # Monitor binaries
      -w /usr/bin/docker -p x -k docker_exec
      -w /usr/bin/mise -p x -k mise_exec

runcmd:
  # Ensure required directories exist
  - mkdir -p /opt/aws/amazon-cloudwatch-agent/etc
  - mkdir -p /home/ubuntu/.local/bin
  - mkdir -p /etc/ssh/sshd_config.d

  # Update packages
  - apt-get update
  - apt-get upgrade -y

  # Enable and start essential services
  - systemctl enable unattended-upgrades
  - systemctl start unattended-upgrades
  - systemctl enable auditd
  - systemctl start auditd

  # Install Docker using the official convenience script
  - curl -fsSL https://get.docker.com | sh
  - usermod -aG docker ubuntu
  - systemctl enable docker
  - systemctl start docker

  # Ensure the ~/.local/bin directory exists and is owned by ubuntu
  - mkdir -p /home/ubuntu/.local/bin
  - chown -R ubuntu:ubuntu /home/ubuntu/.local

  # Add ~/.local/bin to PATH in .bashrc
  - runuser -l ubuntu -c 'echo "export PATH=\$HOME/.local/bin:\$PATH" >> ~/.bashrc'

  # Install mise as ubuntu user
  - runuser -l ubuntu -c 'curl https://mise.run | sh'
  - runuser -l ubuntu -c 'echo "eval \"\$(/home/ubuntu/.local/bin/mise activate bash)\"" >> ~/.bashrc'

  # Install uv as ubuntu user
  - runuser -l ubuntu -c 'curl -LsSf https://astral.sh/uv/install.sh | sh'
  - runuser -l ubuntu -c 'mkdir -p ~/.local/bin && sudo mv uv /usr/local/bin/uv'

  # Install bun as ubuntu user
  - runuser -l ubuntu -c 'curl -fsSL https://bun.sh/install | bash -s -- --yes'
  - runuser -l ubuntu -c 'echo "export PATH=\$HOME/.bun/bin:\$PATH" >> ~/.bashrc'

  # Configure CloudWatch agent
  - systemctl enable amazon-cloudwatch-agent
  - systemctl start amazon-cloudwatch-agent

  # Apply audit rules
  - augenrules --load
  - systemctl restart auditd

  # Security configurations
  - systemctl restart ssh
  - systemctl enable fail2ban
  - systemctl start fail2ban
  - aideinit
  - mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db

  # Create management scripts directory
  - mkdir -p /opt/ubuntu-box/scripts
  - chown -R ubuntu:ubuntu /opt/ubuntu-box

  # Final permissions setup
  - chown -R ubuntu:ubuntu /home/ubuntu
  - chmod 755 /usr/local/bin/*

  # Setup automatic security updates
  - echo "APT::Periodic::Update-Package-Lists \"1\";" > /etc/apt/apt.conf.d/20auto-upgrades
  - echo "APT::Periodic::Unattended-Upgrade \"1\";" >> /etc/apt/apt.conf.d/20auto-upgrades

power_state:
  mode: reboot
  timeout: 30
  condition: True
